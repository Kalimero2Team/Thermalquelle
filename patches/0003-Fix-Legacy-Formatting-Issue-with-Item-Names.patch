From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: byquanton <32410361+byquanton@users.noreply.github.com>
Date: Sun, 15 Oct 2023 15:31:47 +0200
Subject: [PATCH] Fix Legacy Formatting Issue with Item Names


diff --git a/core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java b/core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java
index eca86ff3272a3db7fdf96f468d201149bed34b8f..5054b3761a03bd639bae65342acb334b700def96 100644
--- a/core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java
+++ b/core/src/main/java/org/geysermc/geyser/translator/text/MessageTranslator.java
@@ -51,6 +51,7 @@ import org.geysermc.geyser.text.DummyLegacyHoverEventSerializer;
 import org.geysermc.geyser.text.GeyserLocale;
 import org.geysermc.geyser.text.GsonComponentSerializerWrapper;
 import org.geysermc.geyser.text.MinecraftTranslationRegistry;
+import org.jetbrains.annotations.NotNull;
 import org.geysermc.mcprotocollib.protocol.data.DefaultComponentSerializer;
 import org.geysermc.mcprotocollib.protocol.data.game.Holder;
 import org.geysermc.mcprotocollib.protocol.data.game.chat.ChatType;
@@ -76,11 +77,11 @@ public class MessageTranslator {
     static {
         // Temporary fix for https://github.com/KyoriPowered/adventure/issues/447 - TODO resolve properly
         GsonComponentSerializer source = DefaultComponentSerializer.get()
-                .toBuilder()
-                // Use a custom legacy hover event deserializer since we don't use any of this data anyway, and
-                // fixes issues where legacy hover events throw deserialization errors
-                .legacyHoverEventSerializer(new DummyLegacyHoverEventSerializer())
-                .build();
+            .toBuilder()
+            // Use a custom legacy hover event deserializer since we don't use any of this data anyway, and
+            // fixes issues where legacy hover events throw deserialization errors
+            .legacyHoverEventSerializer(new DummyLegacyHoverEventSerializer())
+            .build();
         GSON_SERIALIZER = new GsonComponentSerializerWrapper(source);
         // Tell MCProtocolLib to use this serializer, too.
         DefaultComponentSerializer.set(GSON_SERIALIZER);
@@ -106,13 +107,13 @@ public class MessageTranslator {
 
         // Can be removed once Adventure 1.15.0 is released (see https://github.com/KyoriPowered/adventure/pull/954)
         ComponentFlattener flattener = ComponentFlattener.basic().toBuilder()
-                .mapper(ScoreComponent.class, component -> "")
-                .build();
+            .mapper(ScoreComponent.class, component -> "")
+            .build();
 
         BEDROCK_SERIALIZER = LegacyComponentSerializer.legacySection().toBuilder()
-                .formats(formats)
-                .flattener(flattener)
-                .build();
+            .formats(formats)
+            .flattener(flattener)
+            .build();
 
         // cache all the legacy character codes
         StringBuilder colorBuilder = new StringBuilder();
@@ -231,19 +232,28 @@ public class MessageTranslator {
             return message;
         }
 
-        try {
-            return convertJsonMessage(message, locale);
-        } catch (Exception ignored) {
-            // Use the default legacy serializer since message is java-legacy
-            String convertedMessage = convertMessage(LegacyComponentSerializer.legacySection().deserialize(message), locale);
-
-            // We have to do this since Adventure strips the starting reset character
-            if (message.startsWith(RESET) && !convertedMessage.startsWith(RESET)) {
-                convertedMessage = RESET + convertedMessage;
+        if(!message.contains("ยง")) {
+            try {
+                return convertJsonMessage(message, locale);
+            } catch (Exception e) {
+                return convertLegacyMessage(message, locale);
             }
+        } else {
+            return convertLegacyMessage(message, locale);
+        }
+    }
+
+    @NotNull
+    private static String convertLegacyMessage(String message, String locale) {
+        // Use the default legacy serializer since message is java-legacy
+        String convertedMessage = convertMessage(LegacyComponentSerializer.legacySection().deserialize(message), locale);
 
-            return convertedMessage;
+        // We have to do this since Adventure strips the starting reset character
+        if (message.startsWith(RESET) && !convertedMessage.startsWith(RESET)) {
+            convertedMessage = RESET + convertedMessage;
         }
+
+        return convertedMessage;
     }
 
     public static String convertMessageLenient(String message) {
@@ -338,8 +348,8 @@ public class MessageTranslator {
             // As of 1.19 - do this to apply all the styling for signed messages
             // Though, Bedrock cannot care about the signed stuff.
             TranslatableComponent.Builder withDecoration = Component.translatable()
-                    .key(chat.translationKey())
-                    .style(ChatDecoration.getStyle(chat));
+                .key(chat.translationKey())
+                .style(ChatDecoration.getStyle(chat));
             List<ChatTypeDecoration.Parameter> parameters = chat.parameters();
             List<Component> args = new ArrayList<>(3);
             if (parameters.contains(ChatDecoration.Parameter.TARGET)) {
